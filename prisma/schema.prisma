// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String             @id @default(cuid())
    name             String?
    email            String             @unique
    emailVerified    DateTime?
    image            String             @default("")
    accounts         Account[]
    sessions         Session[]
    username         String             @unique @db.VarChar(255)
    username_lower   String             @unique @db.VarChar(255)
    status           String             @default("") @db.VarChar(255)
    joinDate         DateTime           @default(now())
    banner           String             @default("https://i.imgur.com/xUbnRZy.jpg")
    posts            Meme[]
    MemesLikedByUser MemesLikedByUser[]
    Following        FollowerFollowee[] @relation("follower")
    FollowedBy       FollowerFollowee[] @relation("followee")
    Comment          Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Meme {
    postId           String             @id @default(cuid())
    userId           String
    user             User               @relation(fields: [userId], references: [id])
    creationDate     DateTime           @default(now())
    editDate         DateTime           @default(now())
    title            String             @db.VarChar(100)
    image            String
    description      String             @default("")
    views            Int                @default(0)
    MemesLikedByUser MemesLikedByUser[]
    Comment          Comment[]
}

model MemesLikedByUser {
    postId String
    userId String
    user   User   @relation(fields: [userId], references: [id])
    meme   Meme   @relation(fields: [postId], references: [postId])

    @@id([postId, userId])
}

model FollowerFollowee {
    followerId String
    followeeId String
    follower   User   @relation("follower", fields: [followerId], references: [id])
    followee   User   @relation("followee", fields: [followeeId], references: [id])

    @@id([followeeId, followerId])
}

model Comment {
    commentId String @id @default(cuid())
    content   String @db.VarChar(255)
    userId    String
    postId    String
    user      User   @relation(fields: [userId], references: [id])
    meme      Meme   @relation(fields: [postId], references: [postId])
}
